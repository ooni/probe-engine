// This package generates go code for ooniapimodel.
package main

import (
	"errors"
	"fmt"
	"io"
	"log"
	"os"
	"reflect"
	"time"

	"github.com/ooni/probe-engine/ooniapi/ooniapimodel"
)

var all = []ooniapimodel.APIType{
	ooniapimodel.GETCheckReportID{},
	ooniapimodel.GETMeasurementMeta{},
	ooniapimodel.POSTOpenReport{},
	ooniapimodel.POSTSubmitMeasurement{},
	ooniapimodel.GETTestHelpers{},
	ooniapimodel.GETURLS{},
}

var (
	errNoMethodTag     = errors.New("gocompiler: missing method tag")
	errNoPathTag       = errors.New("gocompiler: missing path tag")
	errNotMethodType   = errors.New("gocompiler: not a MethodType")
	errNotRequestType  = errors.New("gocompiler: not a RequestType")
	errNotResponseType = errors.New("gocompiler: not a ResponseType")
	errNotURLPathType  = errors.New("gocompiler: not a URLPathType")
	errNoSuchField     = errors.New("gocompiler: no such field")
	errNotStruct       = errors.New("gocompiler: not a struct")
)

type compiler struct {
	w io.Writer
}

func (c compiler) getTypeInfo(api ooniapimodel.APIType) (reflect.Type, error) {
	valueinfo := reflect.ValueOf(api)
	typeinfo := valueinfo.Type()
	if typeinfo.Kind() != reflect.Struct {
		return nil, errNotStruct
	}
	return typeinfo, nil
}

func (c compiler) getField(typeinfo reflect.Type, name string) (*reflect.StructField, error) {
	for idx := 0; idx < typeinfo.NumField(); idx++ {
		ft := typeinfo.Field(idx)
		if ft.Name == name {
			return &ft, nil
		}
	}
	return nil, fmt.Errorf("%w: %s", errNoSuchField, name)
}

func (c compiler) getRequest(typeinfo reflect.Type) (*reflect.StructField, error) {
	field, err := c.getField(typeinfo, "Request")
	if err != nil {
		return nil, err
	}
	required := reflect.TypeOf((*ooniapimodel.RequestType)(nil)).Elem()
	if !field.Type.Implements(required) {
		return nil, errNotRequestType
	}
	return field, nil
}

func (c compiler) getResponse(typeinfo reflect.Type) (*reflect.StructField, error) {
	field, err := c.getField(typeinfo, "Response")
	if err != nil {
		return nil, err
	}
	required := reflect.TypeOf((*ooniapimodel.ResponseType)(nil)).Elem()
	if !field.Type.Implements(required) {
		return nil, errNotResponseType
	}
	return field, nil
}

func (c compiler) getMethod(typeinfo reflect.Type) (string, error) {
	field, err := c.getField(typeinfo, "Method")
	if err != nil {
		return "", err
	}
	required := reflect.TypeOf((*ooniapimodel.MethodType)(nil)).Elem()
	if !field.Type.Implements(required) {
		return "", errNotMethodType
	}
	if tag := field.Tag.Get("method"); tag != "" {
		return tag, nil
	}
	return "", errNoMethodTag
}

func (c compiler) getURLPath(typeinfo reflect.Type) (string, error) {
	field, err := c.getField(typeinfo, "URLPath")
	if err != nil {
		return "", err
	}
	required := reflect.TypeOf((*ooniapimodel.URLPathType)(nil)).Elem()
	if !field.Type.Implements(required) {
		return "", errNotURLPathType
	}
	if tag := field.Tag.Get("path"); tag != "" {
		return tag, nil
	}
	return "", errNoPathTag
}

func (c compiler) preamble() error {
	fmt.Fprintf(c.w, "// Code generated by go generate; DO NOT EDIT.\n")
	fmt.Fprintf(c.w, "// Generated on: %s\n", time.Now())
	fmt.Fprintf(c.w, "\n")
	fmt.Fprintf(c.w, "package ooniapi\n\n")
	fmt.Fprintf(c.w, "import (\n")
	fmt.Fprintf(c.w, "\t\"context\"\n")
	fmt.Fprintf(c.w, "\n")
	fmt.Fprintf(c.w, "\t\"github.com/ooni/probe-engine/ooniapi/ooniapimodel\"\n")
	fmt.Fprintf(c.w, ")\n\n")
	fmt.Fprintf(c.w, "//go:generate go run ./gocompiler\n")
	return nil
}

func (c compiler) compile(api ooniapimodel.APIType) error {
	typeinfo, err := c.getTypeInfo(api)
	if err != nil {
		return err
	}
	method, err := c.getMethod(typeinfo)
	if err != nil {
		return err
	}
	urlpath, err := c.getURLPath(typeinfo)
	if err != nil {
		return err
	}
	req, err := c.getRequest(typeinfo)
	if err != nil {
		return err
	}
	resp, err := c.getResponse(typeinfo)
	if err != nil {
		return err
	}
	return generator{
		name:    typeinfo.Name(),
		method:  method,
		urlpath: urlpath,
		req:     req,
		resp:    resp,
		w:       c.w,
	}.generate()
}

type generator struct {
	name    string
	method  string
	urlpath string
	req     *reflect.StructField
	resp    *reflect.StructField
	w       io.Writer
}

func (g generator) beginFunc() error {
	fmt.Fprintf(g.w, "\n// %s implements the %s %s API\n", g.name, g.method, g.urlpath)
	fmt.Fprintf(g.w, "func (c Client) %s(", g.name)
	fmt.Fprintf(g.w, "ctx context.Context")
	if g.req != nil {
		fmt.Fprintf(g.w, ", req *ooniapimodel.%s", g.req.Type.Name())
	}
	fmt.Fprintf(g.w, ") (")
	if g.resp != nil {
		fmt.Fprintf(g.w, "*ooniapimodel.%s, ", g.resp.Type.Name())
	}
	fmt.Fprintf(g.w, "error) {\n")
	return nil
}

func (g generator) funcBody() error {
	if g.resp != nil {
		fmt.Fprintf(g.w, "\tvar out ooniapimodel.%s\n", g.resp.Type.Name())
	}
	fmt.Fprintf(g.w, "\terr := c.api(ctx, apispec{\n")
	fmt.Fprintf(g.w, "\t\tMethod:  \"%s\",\n", g.method)
	fmt.Fprintf(g.w, "\t\tURLPath: \"%s\",\n", g.urlpath)
	if g.req != nil {
		fmt.Fprintf(g.w, "\t\tIn:      req,\n")
	}
	if g.resp != nil {
		fmt.Fprintf(g.w, "\t\tOut:     &out,\n")
	}
	fmt.Fprintf(g.w, "\t})\n")
	fmt.Fprintf(g.w, "\treturn ")
	if g.resp != nil {
		fmt.Fprintf(g.w, "&out, ")
	}
	fmt.Fprintf(g.w, "err\n")
	return nil
}

func (g generator) endFunc() error {
	fmt.Fprintf(g.w, "}\n")
	return nil
}

func (g generator) generate() error {
	if err := g.beginFunc(); err != nil {
		return err
	}
	if err := g.funcBody(); err != nil {
		return err
	}
	if err := g.endFunc(); err != nil {
		return err
	}
	return nil
}

func main() {
	fp, err := os.Create("generated.go")
	if err != nil {
		log.Fatal(err)
	}
	c := compiler{w: fp}
	if err := c.preamble(); err != nil {
		log.Fatal(err)
	}
	for _, api := range all {
		if err := c.compile(api); err != nil {
			log.Fatal(err)
		}
	}
}
