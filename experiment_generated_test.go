// Code generated by go generate; DO NOT EDIT.

package engine

import (
	"testing"

	"github.com/ooni/probe-engine/model"
)

//go:generate go run generate_experiment.go

func TestExperimentNewMeasurementProbeIPWorksAsIntended(t *testing.T) {
	sess := &Session{location: &model.LocationInfo{
		ProbeIP: "8.8.8.8",
	}}
	newExperiment := func() *Experiment {
		builder, err := sess.NewExperimentBuilder("example")
		if err != nil {
			t.Fatal(err)
		}
		return builder.NewExperiment()
	}
	t.Run("with false setting", func(t *testing.T) {
		sess.privacySettings.IncludeIP = false
		exp := newExperiment()
		m := exp.newMeasurement("")
		if m.ProbeIP != model.DefaultProbeIP {
			t.Fatal("not the value we expected")
		}
	})
	t.Run("with true setting", func(t *testing.T) {
		sess.privacySettings.IncludeIP = true
		exp := newExperiment()
		m := exp.newMeasurement("")
		if m.ProbeIP != "8.8.8.8" {
			t.Fatal("not the value we expected")
		}
	})
}

func TestExperimentNewMeasurementProbeASNStringWorksAsIntended(t *testing.T) {
	sess := &Session{location: &model.LocationInfo{
		ASN: 30722,
	}}
	newExperiment := func() *Experiment {
		builder, err := sess.NewExperimentBuilder("example")
		if err != nil {
			t.Fatal(err)
		}
		return builder.NewExperiment()
	}
	t.Run("with false setting", func(t *testing.T) {
		sess.privacySettings.IncludeASN = false
		exp := newExperiment()
		m := exp.newMeasurement("")
		if m.ProbeASN != model.DefaultProbeASNString {
			t.Fatal("not the value we expected")
		}
	})
	t.Run("with true setting", func(t *testing.T) {
		sess.privacySettings.IncludeASN = true
		exp := newExperiment()
		m := exp.newMeasurement("")
		if m.ProbeASN != "AS30722" {
			t.Fatal("not the value we expected")
		}
	})
}

func TestExperimentOpenReportProbeASNStringWorksAsIntended(t *testing.T) {
	sess := &Session{location: &model.LocationInfo{
		ASN: 30722,
	}}
	newExperiment := func() *Experiment {
		builder, err := sess.NewExperimentBuilder("example")
		if err != nil {
			t.Fatal(err)
		}
		return builder.NewExperiment()
	}
	t.Run("with false setting", func(t *testing.T) {
		sess.privacySettings.IncludeASN = false
		exp := newExperiment()
		rt := exp.newReportTemplate()
		if rt.ProbeASN != model.DefaultProbeASNString {
			t.Fatal("not the value we expected")
		}
	})
	t.Run("with true setting", func(t *testing.T) {
		sess.privacySettings.IncludeASN = true
		exp := newExperiment()
		rt := exp.newReportTemplate()
		if rt.ProbeASN != "AS30722" {
			t.Fatal("not the value we expected")
		}
	})
}

func TestExperimentNewMeasurementProbeCCWorksAsIntended(t *testing.T) {
	sess := &Session{location: &model.LocationInfo{
		CountryCode: "IT",
	}}
	newExperiment := func() *Experiment {
		builder, err := sess.NewExperimentBuilder("example")
		if err != nil {
			t.Fatal(err)
		}
		return builder.NewExperiment()
	}
	t.Run("with false setting", func(t *testing.T) {
		sess.privacySettings.IncludeCountry = false
		exp := newExperiment()
		m := exp.newMeasurement("")
		if m.ProbeCC != model.DefaultProbeCC {
			t.Fatal("not the value we expected")
		}
	})
	t.Run("with true setting", func(t *testing.T) {
		sess.privacySettings.IncludeCountry = true
		exp := newExperiment()
		m := exp.newMeasurement("")
		if m.ProbeCC != "IT" {
			t.Fatal("not the value we expected")
		}
	})
}

func TestExperimentOpenReportProbeCCWorksAsIntended(t *testing.T) {
	sess := &Session{location: &model.LocationInfo{
		CountryCode: "IT",
	}}
	newExperiment := func() *Experiment {
		builder, err := sess.NewExperimentBuilder("example")
		if err != nil {
			t.Fatal(err)
		}
		return builder.NewExperiment()
	}
	t.Run("with false setting", func(t *testing.T) {
		sess.privacySettings.IncludeCountry = false
		exp := newExperiment()
		rt := exp.newReportTemplate()
		if rt.ProbeCC != model.DefaultProbeCC {
			t.Fatal("not the value we expected")
		}
	})
	t.Run("with true setting", func(t *testing.T) {
		sess.privacySettings.IncludeCountry = true
		exp := newExperiment()
		rt := exp.newReportTemplate()
		if rt.ProbeCC != "IT" {
			t.Fatal("not the value we expected")
		}
	})
}

func TestExperimentNewMeasurementProbeNetworkNameWorksAsIntended(t *testing.T) {
	sess := &Session{location: &model.LocationInfo{
		NetworkName: "Vodafone Italia",
	}}
	newExperiment := func() *Experiment {
		builder, err := sess.NewExperimentBuilder("example")
		if err != nil {
			t.Fatal(err)
		}
		return builder.NewExperiment()
	}
	t.Run("with false setting", func(t *testing.T) {
		sess.privacySettings.IncludeASN = false
		exp := newExperiment()
		m := exp.newMeasurement("")
		if m.ProbeNetworkName != model.DefaultProbeNetworkName {
			t.Fatal("not the value we expected")
		}
	})
	t.Run("with true setting", func(t *testing.T) {
		sess.privacySettings.IncludeASN = true
		exp := newExperiment()
		m := exp.newMeasurement("")
		if m.ProbeNetworkName != "Vodafone Italia" {
			t.Fatal("not the value we expected")
		}
	})
}

func TestExperimentNewMeasurementResolverIPWorksAsIntended(t *testing.T) {
	sess := &Session{location: &model.LocationInfo{
		ResolverIP: "9.9.9.9",
	}}
	newExperiment := func() *Experiment {
		builder, err := sess.NewExperimentBuilder("example")
		if err != nil {
			t.Fatal(err)
		}
		return builder.NewExperiment()
	}
	t.Run("with false setting", func(t *testing.T) {
		sess.privacySettings.IncludeIP = false
		exp := newExperiment()
		m := exp.newMeasurement("")
		if m.ResolverIP != model.DefaultResolverIP {
			t.Fatal("not the value we expected")
		}
	})
	t.Run("with true setting", func(t *testing.T) {
		sess.privacySettings.IncludeIP = true
		exp := newExperiment()
		m := exp.newMeasurement("")
		if m.ResolverIP != "9.9.9.9" {
			t.Fatal("not the value we expected")
		}
	})
}

func TestExperimentNewMeasurementResolverASNStringWorksAsIntended(t *testing.T) {
	sess := &Session{location: &model.LocationInfo{
		ResolverASN: 44,
	}}
	newExperiment := func() *Experiment {
		builder, err := sess.NewExperimentBuilder("example")
		if err != nil {
			t.Fatal(err)
		}
		return builder.NewExperiment()
	}
	t.Run("with false setting", func(t *testing.T) {
		sess.privacySettings.IncludeASN = false
		exp := newExperiment()
		m := exp.newMeasurement("")
		if m.ResolverASN != model.DefaultResolverASNString {
			t.Fatal("not the value we expected")
		}
	})
	t.Run("with true setting", func(t *testing.T) {
		sess.privacySettings.IncludeASN = true
		exp := newExperiment()
		m := exp.newMeasurement("")
		if m.ResolverASN != "AS44" {
			t.Fatal("not the value we expected")
		}
	})
}

func TestExperimentNewMeasurementResolverNetworkNameWorksAsIntended(t *testing.T) {
	sess := &Session{location: &model.LocationInfo{
		ResolverNetworkName: "Google LLC",
	}}
	newExperiment := func() *Experiment {
		builder, err := sess.NewExperimentBuilder("example")
		if err != nil {
			t.Fatal(err)
		}
		return builder.NewExperiment()
	}
	t.Run("with false setting", func(t *testing.T) {
		sess.privacySettings.IncludeASN = false
		exp := newExperiment()
		m := exp.newMeasurement("")
		if m.ResolverNetworkName != model.DefaultResolverNetworkName {
			t.Fatal("not the value we expected")
		}
	})
	t.Run("with true setting", func(t *testing.T) {
		sess.privacySettings.IncludeASN = true
		exp := newExperiment()
		m := exp.newMeasurement("")
		if m.ResolverNetworkName != "Google LLC" {
			t.Fatal("not the value we expected")
		}
	})
}
