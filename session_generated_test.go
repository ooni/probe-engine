// Code generated by go generate; DO NOT EDIT.

package engine

import (
	"testing"

	"github.com/ooni/probe-engine/model"
)

//go:generate go run generate_session.go

func TestSessionProbeIPWorksAsIntended(t *testing.T) {
	sess := &Session{location: &model.LocationInfo{
		ProbeIP: "8.8.8.8",
	}}
	t.Run("with false setting", func(t *testing.T) {
		sess.privacySettings.IncludeIP = false
		out := sess.MaybeProbeIP()
		if out != model.DefaultProbeIP {
			t.Fatal("not the value we expected")
		}
	})
	t.Run("with true setting", func(t *testing.T) {
		sess.privacySettings.IncludeIP = true
		out := sess.MaybeProbeIP()
		if out != "8.8.8.8" {
			t.Fatal("not the value we expected")
		}
	})
}

func TestSessionProbeASNWorksAsIntended(t *testing.T) {
	sess := &Session{location: &model.LocationInfo{
		ASN: 30722,
	}}
	t.Run("with false setting", func(t *testing.T) {
		sess.privacySettings.IncludeASN = false
		out := sess.MaybeProbeASN()
		if out != model.DefaultProbeASN {
			t.Fatal("not the value we expected")
		}
	})
	t.Run("with true setting", func(t *testing.T) {
		sess.privacySettings.IncludeASN = true
		out := sess.MaybeProbeASN()
		if out != 30722 {
			t.Fatal("not the value we expected")
		}
	})
}

func TestSessionProbeASNStringWorksAsIntended(t *testing.T) {
	sess := &Session{location: &model.LocationInfo{
		ASN: 30722,
	}}
	t.Run("with false setting", func(t *testing.T) {
		sess.privacySettings.IncludeASN = false
		out := sess.MaybeProbeASNString()
		if out != model.DefaultProbeASNString {
			t.Fatal("not the value we expected")
		}
	})
	t.Run("with true setting", func(t *testing.T) {
		sess.privacySettings.IncludeASN = true
		out := sess.MaybeProbeASNString()
		if out != "AS30722" {
			t.Fatal("not the value we expected")
		}
	})
}

func TestSessionProbeCCWorksAsIntended(t *testing.T) {
	sess := &Session{location: &model.LocationInfo{
		CountryCode: "IT",
	}}
	t.Run("with false setting", func(t *testing.T) {
		sess.privacySettings.IncludeCountry = false
		out := sess.MaybeProbeCC()
		if out != model.DefaultProbeCC {
			t.Fatal("not the value we expected")
		}
	})
	t.Run("with true setting", func(t *testing.T) {
		sess.privacySettings.IncludeCountry = true
		out := sess.MaybeProbeCC()
		if out != "IT" {
			t.Fatal("not the value we expected")
		}
	})
}

func TestSessionProbeNetworkNameWorksAsIntended(t *testing.T) {
	sess := &Session{location: &model.LocationInfo{
		NetworkName: "Vodafone Italia",
	}}
	t.Run("with false setting", func(t *testing.T) {
		sess.privacySettings.IncludeASN = false
		out := sess.MaybeProbeNetworkName()
		if out != model.DefaultProbeNetworkName {
			t.Fatal("not the value we expected")
		}
	})
	t.Run("with true setting", func(t *testing.T) {
		sess.privacySettings.IncludeASN = true
		out := sess.MaybeProbeNetworkName()
		if out != "Vodafone Italia" {
			t.Fatal("not the value we expected")
		}
	})
}

func TestSessionResolverIPWorksAsIntended(t *testing.T) {
	sess := &Session{location: &model.LocationInfo{
		ResolverIP: "9.9.9.9",
	}}
	t.Run("with false setting", func(t *testing.T) {
		sess.privacySettings.IncludeIP = false
		out := sess.MaybeResolverIP()
		if out != model.DefaultResolverIP {
			t.Fatal("not the value we expected")
		}
	})
	t.Run("with true setting", func(t *testing.T) {
		sess.privacySettings.IncludeIP = true
		out := sess.MaybeResolverIP()
		if out != "9.9.9.9" {
			t.Fatal("not the value we expected")
		}
	})
}

func TestSessionResolverASNWorksAsIntended(t *testing.T) {
	sess := &Session{location: &model.LocationInfo{
		ResolverASN: 44,
	}}
	t.Run("with false setting", func(t *testing.T) {
		sess.privacySettings.IncludeASN = false
		out := sess.MaybeResolverASN()
		if out != model.DefaultResolverASN {
			t.Fatal("not the value we expected")
		}
	})
	t.Run("with true setting", func(t *testing.T) {
		sess.privacySettings.IncludeASN = true
		out := sess.MaybeResolverASN()
		if out != 44 {
			t.Fatal("not the value we expected")
		}
	})
}

func TestSessionResolverASNStringWorksAsIntended(t *testing.T) {
	sess := &Session{location: &model.LocationInfo{
		ResolverASN: 44,
	}}
	t.Run("with false setting", func(t *testing.T) {
		sess.privacySettings.IncludeASN = false
		out := sess.MaybeResolverASNString()
		if out != model.DefaultResolverASNString {
			t.Fatal("not the value we expected")
		}
	})
	t.Run("with true setting", func(t *testing.T) {
		sess.privacySettings.IncludeASN = true
		out := sess.MaybeResolverASNString()
		if out != "AS44" {
			t.Fatal("not the value we expected")
		}
	})
}

func TestSessionResolverNetworkNameWorksAsIntended(t *testing.T) {
	sess := &Session{location: &model.LocationInfo{
		ResolverNetworkName: "Google LLC",
	}}
	t.Run("with false setting", func(t *testing.T) {
		sess.privacySettings.IncludeASN = false
		out := sess.MaybeResolverNetworkName()
		if out != model.DefaultResolverNetworkName {
			t.Fatal("not the value we expected")
		}
	})
	t.Run("with true setting", func(t *testing.T) {
		sess.privacySettings.IncludeASN = true
		out := sess.MaybeResolverNetworkName()
		if out != "Google LLC" {
			t.Fatal("not the value we expected")
		}
	})
}
